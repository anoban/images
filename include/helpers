#include <type_traits>

// clang-format off
#define _AMD64_
#define WIN32_LEAN_AND_MEAN
#define WIN32_EXTRA_MEAN
#include <windef.h>
#include <wingdi.h>
// clang-format on

// combinations of colours to remove from pixels.
enum class RGB_TAG : unsigned char { RED, GREEN, BLUE, REDGREEN, REDBLUE, GREENBLUE };

// order of pixels in the BMP buffer.
enum class SCANLINE_ORDERING : unsigned char { TOPDOWN, BOTTOMUP };

// mechanism to be used in converting the pixels to black and white.
enum class BW_TRANSFORMATION : unsigned char { AVERAGE, WEIGHTED_AVERAGE, LUMINOSITY, BINARY };

// types of compressions used in BMP files.
enum class COMPRESSION_KIND : unsigned char { RGB, RLE8, RLE4, BITFIELDS, UNKNOWN };

// NOLINTBEGIN(readability-redundant-inline-specifier)
template<
    typename _TyFrom /* scoped enum type */,
    typename _TyTo /* the underlying type */ = // std::is_scoped_enum requires C++23
    typename std::enable_if<std::is_enum<_TyFrom>::value, typename std::underlying_type<_TyFrom>::type>::type>
static inline constexpr _TyTo to_underlying(_In_ const _TyFrom& enumeration) noexcept {
    return static_cast<_TyTo>(enumeration);
}

namespace rgb_transformers {

    // each colour value in the pixel is updated to their arithmetic average
    static inline constexpr void average(_Inout_ RGBQUAD& pixel) noexcept {
        pixel.rgbBlue = pixel.rgbGreen = pixel.rgbRed =
            static_cast<unsigned char>((static_cast<long double>(pixel.rgbBlue) + pixel.rgbGreen + pixel.rgbRed) / 3.0L);
    }

    static inline constexpr void weighted_average(_Inout_ RGBQUAD& pixel) noexcept {
        pixel.rgbBlue = pixel.rgbGreen = pixel.rgbRed =
            static_cast<unsigned char>(pixel.rgbBlue * 0.299L + pixel.rgbGreen * 0.587L + pixel.rgbRed * 0.114L);
    }

    static inline constexpr void luminosity(_Inout_ RGBQUAD& pixel) noexcept {
        pixel.rgbBlue = pixel.rgbGreen = pixel.rgbRed =
            static_cast<unsigned char>(pixel.rgbBlue * 0.2126L + pixel.rgbGreen * 0.7152L + pixel.rgbRed * 0.0722L);
    }

    // every colour value gets scaled down to 0 or scaled up to 255 depending on the average value of colours in a pixel
    static inline constexpr void binary(_Inout_ RGBQUAD& pixel) noexcept {
        pixel.rgbBlue = pixel.rgbGreen = pixel.rgbRed =
            (static_cast<double>(pixel.rgbBlue) + pixel.rgbGreen + pixel.rgbRed) / 3.0 >= 128.0 ? 255Ui8 : 0Ui8;
    }

    // each colour value gets scaled down to 0 or scaled up to 255 depending on the corresponding value
    static inline constexpr void negative(_Inout_ RGBQUAD& pixel) noexcept {
        pixel.rgbBlue  = pixel.rgbBlue >= 128 ? 255 : 0;
        pixel.rgbGreen = pixel.rgbGreen >= 128 ? 255 : 0;
        pixel.rgbRed   = pixel.rgbRed >= 128 ? 255 : 0;
    }

} // namespace rgb_transformers

namespace colour_removers {

    template<RGB_TAG colour> struct remove;

    template<> struct remove<RGB_TAG::RED> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbRed = 0; }
    };

    template<> struct remove<RGB_TAG::GREEN> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbGreen = 0; }
    };

    template<> struct remove<RGB_TAG::BLUE> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbBlue = 0; }
    };

    template<> struct remove<RGB_TAG::REDGREEN> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbRed = pixel.rgbGreen = 0; }
    };

    template<> struct remove<RGB_TAG::GREENBLUE> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbGreen = pixel.rgbBlue = 0; }
    };

    template<> struct remove<RGB_TAG::REDBLUE> final {
            inline constexpr void operator()(_Inout_ RGBQUAD& pixel) noexcept { pixel.rgbRed = pixel.rgbBlue = 0; }
    };

} // namespace colour_removers

// NOLINTEND(readability-redundant-inline-specifier)
