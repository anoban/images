#pragma once

#define _AMD64_ // architecture
#define WIN32_LEAN_AND_MEAN
#define WIN32_EXTRA_MEAN
#include <algorithm>
#include <helpers>
#include <imageio>
#include <numeric>
#include <type_traits>

#include <windef.h>
#include <wingdi.h>

#pragma comment(lib, "Gdi32.lib")

// Windows .bmp format supports 1, 4, 8, 16, 24 and 32 bits pixel depths
// eventhough Windows bitmaps support simple run length compression for pixels with 4 or 8 bits depth, it's rarely used as this compression gives tangible
// reductions only with large pixel blocks of identical colours, which is rare in real life images
// multibyte integers in bitmaps are stored LSB first (using little endian byte order)

// since bitmaps originted in Microsoft, Windows SDK (wingdi.h) comes pre-packed with almost all the necessary data structures and routines to handle bitmaps

// every Windows bitmap file begins with a BITMAPFILEHEADER struct, this helps in recognizing the file as a bitmap, the first two bytes will be 'B', 'M'
// image header comes in two variants, one representing OS/2 bitmap format (BITMAPCOREHEADER) and the other representing the most common Windows bitmap format (BITMAPINFOHEADER)
// however there are no markers to identify the type of the image header present in the bmp image, the only way to determine this is to examine the struct's size filed, that is the first 4 bytes of the struct
// from Windows 95 onwards, Windows supports an extended version of BITMAPINFOHEADER, which could be larger than 40 bytes

// combinations of colours to remove from pixels
enum class RGB_TAG : unsigned char { RED, GREEN, BLUE, REDGREEN, REDBLUE, GREENBLUE };

// order of pixels in the BMP buffer.
enum class SCANLINE_ORDERING : unsigned char { TOPDOWN, BOTTOMUP };

// mechanism to be used in converting the pixels to black and white.
enum class BW_TRANSFORMATION : unsigned char { AVERAGE, WEIGHTED_AVERAGE, LUMINOSITY, BINARY };

// types of compressions used in BMP files.
enum class COMPRESSION_KIND : unsigned char { RGB, RLE8, RLE4, BITFIELDS, UNKNOWN };

namespace colour_removers { // this ir really verbose but makes mutating the pixel buffers possible with a single std::for_each call

    template<RGB_TAG colour> struct remove;

    template<> struct remove<RGB_TAG::RED> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbRed = 0; }
    };

    template<> struct remove<RGB_TAG::GREEN> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbGreen = 0; }
    };

    template<> struct remove<RGB_TAG::BLUE> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbBlue = 0; }
    };

    template<> struct remove<RGB_TAG::REDGREEN> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbRed = pixel.rgbGreen = 0; }
    };

    template<> struct remove<RGB_TAG::GREENBLUE> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbGreen = pixel.rgbBlue = 0; }
    };

    template<> struct remove<RGB_TAG::REDBLUE> final {
            constexpr void operator()(_Inout_ RGBQUAD& pixel) const noexcept { pixel.rgbRed = pixel.rgbBlue = 0; }
    };

} // namespace colour_removers

// for the sake of convenience
static constexpr inline bool operator==(_In_ const RGBQUAD& left, _In_ const RGBQUAD& right) noexcept {
    return left.rgbBlue == right.rgbBlue && left.rgbGreen == right.rgbGreen && left.rgbRed == right.rgbRed;
}

class bitmap final {
        // clang-format off
#ifdef __TEST__
   public:
#endif
        // clang-format on

        unsigned char*   buffer; // this will point to the original file buffer, this is the one that needs deallocation!
        RGBQUAD*         pixels; // this points to the start of pixels in the file buffer i.e offset buffer + 54
        BITMAPFILEHEADER file_header;
        BITMAPINFOHEADER info_header;
        unsigned long    file_size;   // file size
        unsigned long    buffer_size; // length of the buffer, may include trailing unused bytes if construction involved a buffer reuse

        // using a new buffer to store pixels sounds like a clean design but it brings a string of performance issues
        // 1) entails an additional heap allocation (pixel buffer) and a deallocation (the raw file buffer)
        // 2) now that the buffer only holds pixels, we'll need to serialize the metadata structs separately when serializing the image

        // this can be accomplished using two approaches ::
        // 1) by constructing a temporary array of 54 bytes that hold these structs, and calling CreateFileW with CREATE_NEW first to serialize the
        // structs, closing that file and then reopening the serialized file using CreateFileW with OPEN_EXISTING and FILE_APPEND_DATA flags to append the pixel buffer
        // (paying the penalty for two syscalls)
        // 2) we could create a new buffer (gratuitous heap allocation) with enough space for the structs and pixels and then copy the structs and pixels there first,
        // followed by serialization of this new buffer with a call to CreateFileW

        // the best (admittedly less elegant) way to circumnavigate this is to hold an alias pointer that points to the beginning of the pixel buffer
        // inside the raw file buffer - no additional heap allocations and we could just sink the buffer to the disk when a serialization is needed

        // that's 'M' followed by a 'B' (LE), wingdi's BITMAPFILEHEADER uses a  unsigned short for SOI instead of two chars
        static constexpr unsigned short SOI { 'B' | 'M' << 8 }; // Start Of Image

        // NOLINTBEGIN(readability-redundant-inline-specifier)

        inline BITMAPFILEHEADER __cdecl __parse_file_header( // NOLINT(readability-convert-member-functions-to-static)
            _In_reads_bytes_(length) const unsigned char* const imstream,
            _In_ const size_t&                                  length
        ) const noexcept {
            static_assert(sizeof(BITMAPFILEHEADER) == 14LLU, "struct BITMAPFILEHEADER must be 14 bytes in size");
            assert(length >= sizeof(BITMAPFILEHEADER));
            BITMAPFILEHEADER header {};
            if (!imstream) return header;

            // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
            if (imstream[0] != 'B' && imstream[1] != 'M') { // validate that the passed buffer is of a bitmap file
                ::fputws(L"Error in " __FUNCTIONW__ ", file isn't recognized as a Windows bitmap file\n", stderr);
                return header;
            }

            header.bfType      = SOI; // 'B', 'M'
                                      // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
            header.bfSize      = *reinterpret_cast<const unsigned int*>(imstream + 2); // file size in bytes
            header.bfReserved1 = header.bfReserved2 = 0;                               // 4 reserved bytes
                // NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
            header.bfOffBits = *reinterpret_cast<const unsigned int*>(imstream + 10); // offset to the start of pixel data
            return header;
        }

        // find the type of compression used in the BMP file, bitmap files, in general aren't compressed
        constexpr inline COMPRESSION_KIND __cdecl __get_compression_kind( // NOLINT(readability-convert-member-functions-to-static)
            _In_ const unsigned& kind
        ) const noexcept {
            switch (kind) {
                case 0  : return COMPRESSION_KIND::RGB; // uncompressed RGBQUAD pixels
                case 1  : return COMPRESSION_KIND::RLE8;
                case 2  : return COMPRESSION_KIND::RLE4;
                case 3  : return COMPRESSION_KIND::BITFIELDS;
                default : break;
            }
            return COMPRESSION_KIND::UNKNOWN;
        }

        inline BITMAPINFOHEADER __cdecl __parse_info_header( // NOLINT(readability-convert-member-functions-to-static)
            _In_reads_bytes_(length) const unsigned char* const imstream,
            _In_ const size_t&                                  length
        ) const noexcept {
            // alignment of wingdi's BITMAPINFOHEADER members makes it inherently packed :)
            static_assert(sizeof(BITMAPINFOHEADER) == 40LLU, "struct BITMAPINFOHEADER must be 40 bytes in size");
            assert(length >= (sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER)));
            BITMAPINFOHEADER header {};
            if (!imstream) return header;

            if (*reinterpret_cast<const unsigned int*>(imstream + 14U) != 40) { // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
                // header size must be == 40 bytes
                ::fputws(L"Error in " __FUNCTIONW__ ": unparseable BITMAPINFOHEADER\n", stderr);
                return header;
            }

            // NOLINTBEGIN(cppcoreguidelines-pro-bounds-pointer-arithmetic)
            header.biSize          = *reinterpret_cast<const unsigned int*>(imstream + 14); // size of the BITMAPINFOHEADER struct
            header.biWidth         = *reinterpret_cast<const int*>(imstream + 18);          // width of the bitmap image in pixels
            header.biHeight        = *reinterpret_cast<const int*>(imstream + 22);          // height of the bitmap image in pixels
                // bitmaps with a negative height may not be compressed
            header.biPlanes        = *reinterpret_cast<const unsigned short*>(imstream + 26); // must be 1
            header.biBitCount      = *reinterpret_cast<const unsigned short*>(imstream + 28); // 1, 4, 8, 16, 24 or 32
            header.biCompression   = static_cast<decltype(BITMAPINFOHEADER::biCompression)>(  // compression kind (if compressed)
                __get_compression_kind(*reinterpret_cast<const unsigned int*>(imstream + 30U))
            );
            header.biSizeImage     = *reinterpret_cast<const unsigned int*>(imstream + 34); // 0 if not compressed
            header.biXPelsPerMeter = *reinterpret_cast<const int*>(imstream + 38);    // resolution in pixels per meter along the x axis
            header.biYPelsPerMeter = *reinterpret_cast<const int*>(imstream + 42);    // resolution in pixels per meter along the y axis
            header.biClrUsed = *reinterpret_cast<const unsigned int*>(imstream + 46); // number of entries in the colourmap that are used
            header.biClrImportant = *reinterpret_cast<const unsigned int*>(imstream + 50); // number of important colors
            // NOLINTEND(cppcoreguidelines-pro-bounds-pointer-arithmetic)

            return header;
        }

        // NOLINTNEXTLINE(readability-convert-member-functions-to-static)
        constexpr inline SCANLINE_ORDERING __cdecl __get_scanline_order(_In_ const BITMAPINFOHEADER& header) const noexcept {
            // BITMAPINFOHEADER::biHeight is usually an unsigned value, a negative value indicates that the scanlines are ordered top down instead of the customary bottom up order
            return header.biHeight >= 0 ? SCANLINE_ORDERING::BOTTOMUP : SCANLINE_ORDERING::TOPDOWN;
        }

    public:
        using value_type         = RGBQUAD; // pixel type
        using pointer            = value_type*;
        using const_pointer      = const value_type*;
        using reference          = value_type&;
        using const_reference    = const value_type&;
        using iterator           = value_type*;
        using const_iterator     = const value_type*;
        using size_type          = unsigned long long;
        using difference_type    = long long;

        inline bitmap() noexcept = default; // that's good enough

        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init) - intentional
        inline explicit bitmap(_In_ const wchar_t* const filename) noexcept : // construct a bitmap from a file on disk
            buffer { internal::open(filename, file_size) },                   // a little unorthodox but okay lol
            pixels { reinterpret_cast<RGBQUAD*>(buffer + 54) },               // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)}
            file_header { __parse_file_header(buffer, file_size) },
            info_header { __parse_info_header(buffer, file_size) },
            // size {}, we want to preserve size's previous state updated by internal::open()
            buffer_size { file_size } {
            if (!buffer) {                          // if open failed
                ::memset(this, 0U, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation)
                ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
            }
        }

        // construct a bitmap from a stream of bytes
        inline bitmap(
            _In_reads_bytes_(size)
                const unsigned char* const _buffer, // this buffer is expected to contain the metadata preceding bitmap pixel buffer too
            _In_ const unsigned long&      _size
        ) noexcept :
            buffer { new (std::nothrow) unsigned char[_size] }, // cannot take ownership of the incoming buffer, so let's copy it
            pixels { reinterpret_cast<RGBQUAD*>(buffer + 54) }, // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)}
            // if _buffer is nullptr, the __parse_xxx family of helpers will default initialize the cognate header structs
            file_header { __parse_file_header(_buffer, _size) },
            info_header { __parse_info_header(_buffer, _size) },
            file_size { _size },
            buffer_size { _size } {
            if (!buffer) { // has the allocation failed
                pixels    = nullptr;
                file_size = buffer_size = 0;
                ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
                return;
            }

            ::memcpy_s(buffer, file_size, _buffer, _size);
        }

        // copy ctor
        inline bitmap(_In_ const bitmap& other) noexcept :
            buffer { new (std::nothrow
            ) unsigned char[other.file_size] },                 // don't copy the trailing unused bytes from the bitmap, if present
            pixels { reinterpret_cast<RGBQUAD*>(buffer + 54) }, // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)}
            file_header { other.file_header },
            info_header { other.info_header },
            file_size { other.file_size },
            buffer_size { other.file_size /* not buffer_size */ } {
            if (!buffer) {
                ::memset(this, 0U, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation) I know what I'm doing :)
                ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
                return;
            }

            ::memcpy_s(buffer, file_size, other.buffer, other.file_size);
        }

        inline bitmap& operator=(_In_ const bitmap& other) noexcept {
            if (std::addressof(other) == this) return *this;

            // evaluate whether a reallocation is due
            if (buffer_size < other.file_size) { // if the existing buffer cannot hold the other object
                delete[] buffer;
                buffer = new (std::nothrow) unsigned char[other.file_size];
                if (!buffer) {                          // has the allocation failed
                    ::memset(this, 0U, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation) I know what I'm doing :)
                    ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
                    return *this;
                }
                file_size = buffer_size = other.file_size; // update the sizes after reallocation
            } else                                         // if no reallocation was needed
                file_size = other.file_size;               // keep the existing buffer size as we are keeping the existing buffer

            ::memcpy_s(buffer, file_size, other.buffer, other.file_size);
            pixels      = reinterpret_cast<RGBQUAD*>(buffer + 54); // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)}
            file_header = other.file_header;
            info_header = other.info_header;

            return *this;
        }

        // move constructor
        inline bitmap(_Inout_ bitmap&& other) noexcept :
            buffer { other.buffer },
            pixels { other.pixels },
            file_header { other.file_header },
            info_header { other.info_header },
            file_size { other.file_size },
            buffer_size { other.buffer_size } {
            ::memset(std::addressof(other), 0U, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation)
        }

        // move assignment operator
        inline bitmap& operator=(_Inout_ bitmap&& other) noexcept {
            if (std::addressof(other) == this) return *this;

            delete[] buffer; // give up the old buffer

            buffer      = other.buffer;
            pixels      = other.pixels;
            file_header = other.file_header;
            info_header = other.info_header;
            file_size   = other.file_size;
            buffer_size = other.buffer_size;
            ::memset(std::addressof(other), 0U, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation)

            return *this;
        }

        inline ~bitmap() noexcept {
            delete[] buffer;
            ::memset(this, 0, sizeof(bitmap)); // NOLINT(bugprone-undefined-memory-manipulation)
        }

        inline void __cdecl info() const noexcept {
            ::wprintf_s( // NOLINT(cppcoreguidelines-pro-type-vararg)
                L"|---------------------------------------------------------------------------|\n"
                L"%15s bitmap image (%3.4Lf MiBs)\n"
                L"Pixel ordering: %10s\n"
                L"Width: %5lu pixels, Height: %5lu pixels\n"
                L"Bit depth: %3u\n"
                L"|---------------------------------------------------------------------------|\n",
                info_header.biSizeImage ? L"Compressed" : L"Uncompressed",
                file_header.bfSize / (1024.0L * 1024.0L),
                __get_scanline_order(info_header) == SCANLINE_ORDERING::BOTTOMUP ? L"bottom-up" : L"top-down",
                info_header.biWidth,
                info_header.biHeight,
                info_header.biBitCount
            );

            if (info_header.biSizeImage) { // don't bother if the image isn't compressed
                switch (info_header.biCompression) {
                    case ::to_underlying(COMPRESSION_KIND::RGB)       : ::_putws(L"RGB"); break;
                    case ::to_underlying(COMPRESSION_KIND::RLE8)      : ::_putws(L"RLE8"); break;
                    case ::to_underlying(COMPRESSION_KIND::RLE4)      : ::_putws(L"RLE4"); break;
                    case ::to_underlying(COMPRESSION_KIND::BITFIELDS) : ::_putws(L"BITFIELDS"); break;
                    case ::to_underlying(COMPRESSION_KIND::UNKNOWN)   : ::_putws(L"UNKNOWN"); break;
                    default                                           : break;
                }
            }
        }

        inline bool to_file(_In_ const wchar_t* const filename) const noexcept { return internal::serialize(filename, buffer, file_size); }

        inline iterator begin() noexcept { return pixels; }

        inline const_iterator begin() const noexcept { return pixels; }

        inline iterator end() noexcept {
            return pixels + info_header.biHeight * info_header.biWidth; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        inline const_iterator end() const noexcept {
            return pixels + info_header.biHeight * info_header.biWidth; // NOLINT(cppcoreguidelines-pro-bounds-pointer-arithmetic)
        }

        inline reference operator[](_In_ const size_type offset) noexcept { return pixels[offset]; }

        inline const_reference operator[](_In_ const size_type offset) const noexcept { return pixels[offset]; }

        // since this mutates the internal buffer this cannot be used with const bitmap instances
        inline void to_blacknwhite(_In_ const BW_TRANSFORMATION& mapper) noexcept {
            switch (mapper) {
                case BW_TRANSFORMATION::AVERAGE          : std::for_each(begin(), end(), rgb_transformers::average); break;
                case BW_TRANSFORMATION::WEIGHTED_AVERAGE : std::for_each(begin(), end(), rgb_transformers::weighted_average); break;
                case BW_TRANSFORMATION::LUMINOSITY       : std::for_each(begin(), end(), rgb_transformers::luminosity); break;
                case BW_TRANSFORMATION::BINARY           : std::for_each(begin(), end(), rgb_transformers::binary); break;
            }
        }

        inline bitmap make_blacknwhite(_In_ const BW_TRANSFORMATION& mapper) const noexcept {
            auto copy { *this };
            switch (mapper) {
                case BW_TRANSFORMATION::AVERAGE : std::for_each(copy.begin(), copy.end(), rgb_transformers::average); break;
                case BW_TRANSFORMATION::WEIGHTED_AVERAGE :
                    std::for_each(copy.begin(), copy.end(), rgb_transformers::weighted_average);
                    break;
                case BW_TRANSFORMATION::LUMINOSITY : std::for_each(copy.begin(), copy.end(), rgb_transformers::luminosity); break;
                case BW_TRANSFORMATION::BINARY     : std::for_each(copy.begin(), copy.end(), rgb_transformers::binary); break;
            }
            return copy;
        }

        // since this mutates the internal buffer this cannot be used with const bitmap instances
        inline void to_negative() noexcept { std::for_each(begin(), end(), rgb_transformers::negative); }

        inline bitmap make_negative() const noexcept {
            auto copy { *this };
            std::for_each(copy.begin(), copy.end(), rgb_transformers::negative);
            return copy;
        }

        template<RGB_TAG _TyColComb> inline void to_decoloured() noexcept {
            std::for_each(begin(), end(), colour_removers::remove<_TyColComb> {});
        }

        template<RGB_TAG _TyColComb> inline bitmap make_decoloured() const noexcept {
            auto copy { *this };
            std::for_each(copy.begin(), copy.end(), colour_removers::remove<_TyColComb> {});
            return copy;
        }

        // NOLINTEND(readability-redundant-inline-specifier)
};

#if 0

// TODO: Implementation works fine only when width and height are divisible by 256 without remainders. SORT THIS OUT!
static inline bmp_t __cdecl GenGradient(_In_ const long npixels_h, _In_ const long npixels_w) {
    bmp_t          image     = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };
    unsigned char* buffer    = NULL;
    RGBQUAD*       pixels    = NULL;
    const HANDLE64 hProcHeap = GetProcessHeap();

    if ((npixels_h % 256) || (npixels_w % 256)) {
        fwprintf_s(stderr, L"Dimensions need to be multiples of 256! Received (%5zu,%5zu)", npixels_h, npixels_w);
        return image;
    }

    if (hProcHeap == INVALID_HANDLE_VALUE) {
        fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
        return image;
    }
    buffer = HeapAlloc(hProcHeap, 0, (sizeof(RGBQUAD) * npixels_w * npixels_h) + 54); // add 54 bytes for the two structs
    if (!buffer) {
        fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
        return image;
    }

    const BITMAPFILEHEADER tmpfile = { .bfType = SOI,
                                       // packing assumed
                                       .bfSize =
                                           sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + (sizeof(RGBQUAD) * npixels_h * npixels_w),
                                       .bfOffBits   = 54,
                                       .bfReserved1 = 0,
                                       .bfReserved2 = 0 };

    const BITMAPINFOHEADER tmpinfo = { .biSize          = 40,
                                       .biWidth         = npixels_w,
                                       .biHeight        = npixels_h,
                                       .biPlanes        = 1,
                                       .biBitCount      = 32, // three bytes per RGB pixel
                                       .biCompression   = RGB,
                                       .biSizeImage     = 0,
                                       .biXPelsPerMeter = 0,
                                       .biYPelsPerMeter = 0,
                                       .biClrUsed       = 0,
                                       .biClrImportant  = 0 };

    // jump through the pixel matrix, using a window frame
    // within the rows of a window frame, gradually increment the RED value
    // along columns of a window, gradually increment the GREEN value.
    // increment the BLUE pixel across subsequent frames.

    // the deal here is that we must keep at least one RGB component constant within these stride windows. (our pick is BLUE)
    const size_t  hstride = npixels_w / 256, vstride = npixels_h / 256; // NOLINT(readability-isolate-declaration)
    unsigned char red = 0xFF, green = 0xFF, blue = 0x00;                // NOLINT(readability-isolate-declaration)

    // for moving across pixel rows, by a select stride, captures row frames, stride by stride.
    for (size_t v = 0; v < npixels_h /* for all pixels in a column */
;
         v += vstride) {
             // for each pixel row within that vertical stride window (a row frame with vstride rows in it, one below another)
             for (size_t j = v; j < vstride; ++j) {
                 // for moving across pixel columns, partitions rows horizontally into pixel frames with hstride columns in each of them
                 for (size_t h = 0; h < npixels_w /* for all pixels in a row */; h += hstride) { // NOLINT(readability-identifier-length)
                     red++;
                     // for each pixel within the captured pixel frame with hstride columns and vstride rows
                     for (size_t i = h; i < hstride; ++i) {
                         pixels[(j * npixels_w) + i].rgbBlue     = blue;
                         pixels[(j * npixels_w) + i].rgbGreen    = green;
                         pixels[(j * npixels_w) + i].rgbRed      = red;
                         pixels[(j * npixels_w) + i].rgbReserved = 0xFF;
                     }
                 }
                 green--;
             }
             blue++;
         }
         return (bmp_t) { .fileheader = tmpfile, .infoheader = tmpinfo, .buffer = buffer, .pixels = pixels };
         }

         // a struct to specify the factors to scale the colours by
         // minimum scale factor is 0.0, values less than 0.0 (negatives) will be considered 0.0
         // maximum scale factor is 1.0, values greater than 1.0 will be considered as 1.0
         typedef struct cscale {
                 float csBlue;
                 float csGreen;
                 float csRed;
         } cscale_t;

         // TODO incomplete implementation
         static inline bmp_t __cdecl ScaleColors(_In_ bmp_t* const image, _In_ const cscale_t scale, _In_ const bool inplace) {
             HANDLE64       hProcHeap = NULL;
             RGBQUAD*       pixels    = NULL;
             unsigned char* buffer    = NULL;
             bmp_t          temp      = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };

             if (!inplace) { // if a new image is requested, allocate a new pixel buffer.
                 hProcHeap = GetProcessHeap();
                 if (hProcHeap == INVALID_HANDLE_VALUE) {
                     fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
                     return temp;
                 }
                 buffer = HeapAlloc(hProcHeap, 0, image->fileheader.bfSize - 54); // discount the 54 bytes occupied by the two structs
                 if (!buffer) {
                     fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
                     return temp;
                 }
             } else
                 pixels = image->pixels; // if the image is to be modified inplace, copy its pixel buffer's address
         }

#endif

static_assert(std::is_standard_layout<bitmap>::value, "");
