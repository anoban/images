#pragma once

#define _AMD64_ // architecture
#define WIN32_LEAN_AND_MEAN
#define WIN32_EXTRA_MEAN
#include <algorithm>
#include <helpers>
#include <imageio>
#include <numeric>
#include <type_traits>

#include <windef.h>
#include <wingdi.h>

#pragma comment(lib, "Gdi32.lib")

// Windows .bmp format supports 1, 4, 8, 16, 24 and 32 bits pixel depths
// eventhough Windows bitmaps support simple run length compression for pixels with 4 or 8 bits depth, it's rarely used as this compression gives tangible
// reductions only with large pixel blocks of identical colours, which is rare in real life images
// multibyte integers in bitmaps are stored LSB first (using little endian byte order)

// since bitmaps originted in Microsoft, Windows SDK (wingdi.h) comes pre-packed with almost all the necessary data structures and routines to handle bitmaps

// every Windows bitmap file begins with a BITMAPFILEHEADER struct, this helps in recognizing the file as a bitmap, the first two bytes will be 'B', 'M'

// image header comes in two variants, one representing OS/2 bitmap format (BITMAPCOREHEADER) and the other representing the most common Windows bitmap format (BITMAPINFOHEADER)
// however there are no markers to identify the type of the image header present in the bmp image, the only way to determine this is to examine the struct's size filed, that is the first 4 bytes of the struct
// from Windows 95 onwards, Windows supports an extended version of BITMAPINFOHEADER, which could be larger than 40 bytes

class bitmap final {
    public:
        // order of pixels in the BMP buffer.
        enum class SCANLINE_ORDERING : unsigned char { TOPDOWN, BOTTOMUP };

        // mechanism to be used in converting the pixels to black and white.
        enum class BW_TRANSFORMATION : unsigned char { AVERAGE, WEIGHTED_AVERAGE, LUMINOSITY, BINARY };

        // combinations of colours to remove from pixels.
        enum class RGB_COMBINATIONS : unsigned char { RED, GREEN, BLUE, REDGREEN, REDBLUE, GREENBLUE };

        // types of compressions used in BMP files.
        enum class COMPRESSION_KINDS : unsigned char { RGB, RLE8, RLE4, BITFIELDS, UNKNOWN };
        // clang-format off
#ifndef __TEST__
    private:
#endif
        // clang-format on

        unsigned char*   buffer; // this will point to the original file buffer, this is the one that needs deallocation!
        RGBQUAD*         pixels; // this points to the start of pixels in the file buffer i.e offset buffer + 54
        BITMAPFILEHEADER file_header;
        BITMAPINFOHEADER info_header;
        unsigned long    size; // file size
                               // expect a 4 bytes padding here

        // that's 'M' followed by a 'B' (LE), wingdi's BITMAPFILEHEADER uses a  unsigned short for SOI instead of two chars
        static constexpr unsigned short SOI { 'B' | 'M' << 8 }; // Start Of Image

        inline BITMAPFILEHEADER __cdecl __parse_file_header( // NOLINT(readability-convert-member-functions-to-static)
            _In_reads_bytes_(length) const unsigned char* const imstream,
            _In_ const size_t                                   length
        ) const noexcept {
            static_assert(sizeof(BITMAPFILEHEADER) == 14LLU, "struct BITMAPFILEHEADER must be 14 bytes in size");
            assert(imstream);
            assert(length >= sizeof(BITMAPFILEHEADER));

            BITMAPFILEHEADER header {};

            if (imstream[0] != 'B' && imstream[1] != 'M') { // validate that the passed buffer is of a bitmap file
                ::fputws(L"Error in " __FUNCTIONW__ ", file isn't recognized as a Windows bitmap file", stderr);
                return header;
            }

            header.bfType      = SOI;                                                  // 'B', 'M'
            header.bfSize      = *reinterpret_cast<const unsigned int*>(imstream + 2); // file size in bytes
            header.bfReserved1 = header.bfReserved2 = 0;                               // 4 reserved bytes
            header.bfOffBits = *reinterpret_cast<const unsigned int*>(imstream + 10);  // offset to the start of pixel data
            return header;
        }

        // find the type of compression used in the BMP file, bitmap files, in general aren't compressed
        constexpr inline COMPRESSION_KINDS __cdecl __get_compression_kind( // NOLINT(readability-convert-member-functions-to-static)
            _In_ const unsigned& kind
        ) const noexcept {
            switch (kind) {
                case 0  : return COMPRESSION_KINDS::RGB; // uncompressed RGBQUAD pixels
                case 1  : return COMPRESSION_KINDS::RLE8;
                case 2  : return COMPRESSION_KINDS::RLE4;
                case 3  : return COMPRESSION_KINDS::BITFIELDS;
                default : break;
            }
            return COMPRESSION_KINDS::UNKNOWN;
        }

        inline BITMAPINFOHEADER __cdecl __parse_info_header( // NOLINT(readability-convert-member-functions-to-static)
            _In_reads_bytes_(length) const unsigned char* const imstream,
            _In_ const size_t                                   length
        ) const noexcept {
            // alignment of wingdi's BITMAPINFOHEADER members makes it inherently packed :)
            assert(imstream);
            static_assert(sizeof(BITMAPINFOHEADER) == 40LLU, "struct BITMAPINFOHEADER must be 40 bytes in size");
            assert(length >= (sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER)));

            BITMAPINFOHEADER header {};

            if (*reinterpret_cast<const unsigned int*>(imstream + 14U) != 40) { // header size must be == 40 bytes
                ::fputws(L"Error in " __FUNCTIONW__ ": unparseable BITMAPINFOHEADER", stderr);
                return header;
            }

            // NOLINTBEGIN(cppcoreguidelines-pro-bounds-pointer-arithmetic)
            header.biSize          = *reinterpret_cast<const unsigned int*>(imstream + 14); // size of the BITMAPINFOHEADER struct
            header.biWidth         = *reinterpret_cast<const int*>(imstream + 18);          // width of the bitmap image in pixels
            header.biHeight        = *reinterpret_cast<const int*>(imstream + 22);          // height of the bitmap image in pixels
                // bitmaps with a negative height may not be compressed
            header.biPlanes        = *reinterpret_cast<const unsigned short*>(imstream + 26); // must be 1
            header.biBitCount      = *reinterpret_cast<const unsigned short*>(imstream + 28); // 1, 4, 8, 16, 24 or 32
            header.biCompression   = static_cast<decltype(BITMAPINFOHEADER::biCompression)>(  // compression kind (if compressed)
                __get_compression_kind(*reinterpret_cast<const unsigned int*>(imstream + 30U))
            );
            header.biSizeImage     = *reinterpret_cast<const unsigned int*>(imstream + 34); // 0 if not compressed
            header.biXPelsPerMeter = *reinterpret_cast<const int*>(imstream + 38);    // resolution in pixels per meter along the x axis
            header.biYPelsPerMeter = *reinterpret_cast<const int*>(imstream + 42);    // resolution in pixels per meter along the y axis
            header.biClrUsed = *reinterpret_cast<const unsigned int*>(imstream + 46); // number of entries in the colourmap that are used
            header.biClrImportant = *reinterpret_cast<const unsigned int*>(imstream + 50); // number of important colors
            // NOLINTEND(cppcoreguidelines-pro-bounds-pointer-arithmetic)

            return header;
        }

        constexpr inline SCANLINE_ORDERING __cdecl __get_scanline_order(_In_ const BITMAPINFOHEADER& header) const noexcept {
            // BITMAPINFOHEADER::biHeight is usually an unsigned value, a negative value indicates that the scanlines are ordered top down instead of the customary bottom up order
            return header.biHeight >= 0 ? SCANLINE_ORDERING::BOTTOMUP : SCANLINE_ORDERING::TOPDOWN;
        }

    public:
        using value_type         = RGBQUAD;
        using iterator           = value_type*;
        using const_iterator     = const value_type*;
        using size_type          = unsigned long long;
        using difference_type    = long long;

        inline bitmap() noexcept = default; // that's good enough

        inline bitmap(_In_ const wchar_t* const filename) noexcept : buffer {}, pixels {}, file_header {}, info_header {}, size {} {
            buffer = internal::open(filename, size);
            if (!buffer) { // if open failed
                ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
                return;
            }

            pixels      = reinterpret_cast<RGBQUAD*>(buffer + 54);
            file_header = __parse_file_header(buffer, size);
            info_header = __parse_info_header(buffer, size);
        }

        inline bitmap(_In_reads_bytes_(size) unsigned const char* const _buffer, _In_ const unsigned long& _size) noexcept :
            buffer {},
            pixels {}, // optimistically assumes that _buffer will never be a nullptr
            file_header { __parse_file_header(_buffer, _size) },
            info_header { __parse_info_header(_buffer, _size) },
            size { _size } {
            // cannot take ownership of the incoming buffer, so let's copy it
            buffer = new (std::nothrow) unsigned char[_size];
            if (!buffer) { // if open failed
                ::fputws(L"Error inside " __FUNCTIONW__ ", object is default initialized as a fallback\n", stderr);
                return;
            }

            ::memcpy_s(buffer, _size, _buffer, _size);
            pixels = reinterpret_cast<RGBQUAD*>(buffer + 54);
        }

        inline bitmap(_In_ const bitmap& other) noexcept :
            buffer {}, pixels {}, file_header { other.file_header }, info_header { other.info_header }, size { other.size } { }

        inline ~bitmap() noexcept {
            delete[] buffer;
            ::memset(this, 0, sizeof(bitmap));
        }

        inline void __cdecl info() const noexcept {
            ::wprintf_s(
                L"|---------------------------------------------------------------------------|"
                L"%15s bitmap image (%3.4Lf MiBs)\n"
                L"Pixel ordering: %10s\n"
                L"Width: %5lu pixels, Height: %5lu pixels\n"
                L"Bit depth: %3u\n"
                L"Resolution (PPM): X {%5ld} Y {%5ld}\n"
                L"|---------------------------------------------------------------------------|",
                info_header.biSizeImage ? L"Compressed" : L"Uncompressed",
                file_header.bfSize / (1024.0L * 1024.0L),
                __get_scanline_order(info_header) == SCANLINE_ORDERING::BOTTOMUP ? L"bottom-up" : L"top-down",
                info_header.biWidth,
                info_header.biHeight,
                info_header.biBitCount,
                info_header.biXPelsPerMeter,
                info_header.biYPelsPerMeter
            );

            if (info_header.biSizeImage) { // don't bother if the image isn't compressed
                switch (info_header.biCompression) {
                    case ::to_underlying(COMPRESSION_KINDS::RGB)       : ::_putws(L"RGB"); break;
                    case ::to_underlying(COMPRESSION_KINDS::RLE8)      : ::_putws(L"RLE8"); break;
                    case ::to_underlying(COMPRESSION_KINDS::RLE4)      : ::_putws(L"RLE4"); break;
                    case ::to_underlying(COMPRESSION_KINDS::BITFIELDS) : ::_putws(L"BITFIELDS"); break;
                    case ::to_underlying(COMPRESSION_KINDS::UNKNOWN)   : ::_putws(L"UNKNOWN"); break;
                    default                                            : break;
                }
            }
        }

        inline bool to_file(_In_ const wchar_t* const filename) const noexcept { return internal::serialize(filename, buffer, size); }

        inline iterator begin() noexcept { return pixels; }

        inline const_iterator begin() const noexcept { return pixels; }

        inline iterator end() noexcept { return pixels + info_header.biHeight * info_header.biWidth; }

        inline const_iterator end() const noexcept { return pixels + info_header.biHeight * info_header.biWidth; }

        void to_blacknwhite(_In_ const BW_TRANSFORMATION& mapper) noexcept {
            switch (mapper) {
                case BW_TRANSFORMATION::AVERAGE : std::transform(begin(), end(), begin(), rgb_transformers::average); break;
                case BW_TRANSFORMATION::WEIGHTED_AVERAGE :
                    std::transform(begin(), end(), begin(), rgb_transformers::weighted_average);
                    break;
                case BW_TRANSFORMATION::LUMINOSITY : std::transform(begin(), end(), begin(), rgb_transformers::luminosity); break;
                case BW_TRANSFORMATION::BINARY     : std::transform(begin(), end(), begin(), rgb_transformers::binary); break;
                default                            : break;
            }
        }

        bitmap make_blacknwhite() const noexcept { }
};

static inline bool __cdecl BmpWrite(_In_ const wchar_t* const filepath, _In_ bmp_t* const image, _In_ const bool cleanup) {
    // since we are using wingdi's struct definitions, our hands are pretty much tied when it comes to control over the memory layout of the structs
    // WE CANNOT ASSUME THAT THE STRUCTS WILL BE PACKED.

    // ther are two options to handle the two buffers
    // we could use two Win32 IO calls, using CreateFileW, first one with a CREATE_ALWAYS flag to serialize the structs and the second one with
    // OPEN_EXISTING | FILE_APPEND_DATA flags to append the pixel buffer to the existing file
    // this will entail a performance overhead of a separate system call.

    // or we could use a separate allocation, large enough to accomodate the structs and the pixel buffer and then
    // we could use this buffer to serialize the structs and pixels into and then write everything to disk at once.
    // this will eliminate the overhead of using two IO calls while brining in the penalty of a separate heap allocation.
    // TRADEOFFS :(
}

static inline bmp_t __cdecl BmpRead(_In_ const wchar_t* const filepath) {
    size_t size  = 0;
    bmp_t  image = { 0 }; // will be used as an empty placeholder for premature returns until members are properly assigned

    const unsigned char* const buffer = Open(filepath, &size); // HeapFree()
    if (!buffer) return image;                                 // Open will do the error reporting, so just exiting the function is enough

    const BITMAPFILEHEADER fhead = __parse_file_header(buffer, size); // 14 bytes (packed)
    if (!fhead.bfSize) return image; // again __parse_file_header will report errors, if the predicate isn't satisified, exit the routine

    const BITMAPINFOHEADER infhead = __parse_info_header(buffer, size); // 40 bytes (packed)
    if (!infhead.biSize) return image;                                  // error reporting is handled by __parse_info_header

    // creating and using a new buffer to only store pixels sounds like a clean idea but it brings a string of performance issues
    // 1) an additional heap allocation for the new buffer and deallocation of the original buffer
    // 2) now that the buffer only holds pixels, we'll need to serialize the structs separately when serializing the image
    // either constructing a temporary array of 54 bytes that hold the structs, and calling CreateFileW with CREATE_NEW first to serialize the
    // structs, closing that file and then reopening it using CreateFileW with OPEN_EXISTING and FILE_APPEND_DATA to append the pixel buffer
    // paying the penalty for two IO calls.
    // 3) or we could create a new buffer with enough space for the structs and pixels and then copy the structs and pixels there first,
    // followed by serialization of this new buffer with one call to CreateFileW, the caveat here is a gratuitous allocation and deallocation
    // const size_t npixels = (size - 54) / 4; // RGBQUAD consumes 4 bytes

    // const HANDLE64 hProcHeap = GetProcessHeap();
    // if (hProcHeap == INVALID_HANDLE_VALUE) {
    //     fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
    //     return image;
    // }

    // unsigned char*     pixels  = NULL;
    // if (!(pixels = HeapAlloc(hProcHeap, 0, size - 54))) { }
    // even though bmp_t's `pixels` member is declared as an array of RGBQUADs, we will not be creating RGBQUADs before writing them to the buffer.
    // the compiler may choose to optimize this away but performance wise this is too hefty a price to pay.
    // copying the raw bytes will make no difference granted that we dereference the pixels buffer at appropriate 4 byte intervals as RGBQUADs.

    // if stuff goes left, memcpy_s will raise an access violation exception, not bothering error handling here.
    // memcpy_s(pixels, size - 54, buffer + 54, size - 54);
    image.fileheader = fhead;
    image.infoheader = infhead;
    image.buffer     = buffer;
    image.pixels     = (RGBQUAD*) (buffer + 54);
    // HeapFree(hProcHeap, 0, buffer); // loose the raw bytes buffer

    return image;
}

// prints out information about the passed BMP file

// if inplace = true, the returned struct could be safely ignored (it'll just be an empty bmp_t struct)
static inline bmp_t __cdecl ToBWhite(_In_ bmp_t* const image, _In_ const TOBWKIND conversionkind, _In_ const bool inplace) {
    HANDLE64       hProcHeap = NULL;
    unsigned char* buffer    = NULL;
    RGBQUAD*       pixels    = NULL;
    const bmp_t    temp      = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };

    if (!inplace) { // if a new image is requested, allocate a new pixel buffer.
        hProcHeap = GetProcessHeap();
        if (hProcHeap == INVALID_HANDLE_VALUE) {
            fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
            return temp;
        }
        buffer = HeapAlloc(hProcHeap, 0, image->fileheader.bfSize);
        if (!buffer) {
            fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
            return temp;
        }
        // we still need to copy over the structs though, just the first 54 bytes.
        memcpy_s(buffer, 54, image->buffer, 54);
        pixels = (RGBQUAD*) (buffer + 54); // space for the structs
    } else
        pixels = image->pixels; // if the image is to be modified inplace, copy its pixel buffer's address

    // no matter how the caller specifies the inplace argument, pixles will point to a valid memory now
    const size_t npixels = image->infoheader.biHeight * image->infoheader.biWidth;

    switch (conversionkind) { }
    return inplace ? temp :
                     (bmp_t) { .fileheader = image->fileheader, .infoheader = image->infoheader, .buffer = buffer, .pixels = pixels };
}

static inline bmp_t __cdecl ToNegative(_In_ bmp_t* const image, _In_ const bool inplace) {
    HANDLE64       hProcHeap = NULL;
    unsigned char* buffer    = NULL;
    RGBQUAD*       pixels    = NULL;
    const bmp_t    temp      = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };

    if (!inplace) { // if a new image is requested, allocate a new pixel buffer.
        hProcHeap = GetProcessHeap();
        if (hProcHeap == INVALID_HANDLE_VALUE) {
            fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
            return temp;
        }
        buffer = HeapAlloc(hProcHeap, 0, image->fileheader.bfSize);
        if (!buffer) {
            fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
            return temp;
        }
        // copy the metadata structs over to the new buffer.
        memcpy_s(buffer, 54, image->buffer, 54);
        pixels = (RGBQUAD*) (buffer + 54);
    } else
        pixels = image->pixels; // if the image is to be modified inplace, copy its pixel buffer's address

    for (int64_t i = 0; i < image->infoheader.biHeight * image->infoheader.biWidth /* number of total pixels */; ++i) {
        pixels[i].rgbBlue  = image->pixels[i].rgbBlue >= 128 ? 255 : 0;
        pixels[i].rgbGreen = image->pixels[i].rgbGreen >= 128 ? 255 : 0;
        pixels[i].rgbRed   = image->pixels[i].rgbRed >= 128 ? 255 : 0;
        // let the reserved byte be.
    }
    return inplace ? temp :
                     (bmp_t) { .fileheader = image->fileheader, .infoheader = image->infoheader, .buffer = buffer, .pixels = pixels };
}

// removes specified RGB components from the image pixels
static inline bmp_t __cdecl RemoveColour(_In_ bmp_t* const image, _In_ const RGBCOMB colourcombination, _In_ const bool inplace) {
    HANDLE64       hProcHeap = NULL;
    unsigned char* buffer    = NULL;
    RGBQUAD*       pixels    = NULL;
    const bmp_t    temp      = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };

    if (!inplace) { // if a new image is requested, allocate a new pixel buffer.
        hProcHeap = GetProcessHeap();
        if (hProcHeap == INVALID_HANDLE_VALUE) {
            fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
            return temp;
        }
        buffer = HeapAlloc(hProcHeap, 0, image->fileheader.bfSize);
        if (!buffer) {
            fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
            return temp;
        }
        // we need to copy over the complete buffer
        memcpy_s(buffer, image->fileheader.bfSize, image->buffer, image->fileheader.bfSize);
        pixels = (RGBQUAD*) (buffer + 54);
    } else
        pixels = image->pixels; // if the image is to be modified inplace, copy its pixel buffer's address

    const int64_t npixels = image->infoheader.biHeight * image->infoheader.biWidth;
    switch (colourcombination) {
        case BLUE :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbBlue = 0;
            break;
        case GREEN :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbGreen = 0;
            break;
        case RED :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbRed = 0;
            break;
        case REDGREEN :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbRed = pixels[i].rgbGreen = 0;
            break;
        case REDBLUE :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbRed = pixels[i].rgbBlue = 0;
            break;
        case GREENBLUE :
            for (int64_t i = 0; i < npixels; ++i) pixels[i].rgbGreen = pixels[i].rgbBlue = 0;
            break;
    }
    return inplace ? temp :
                     (bmp_t) { .fileheader = image->fileheader, .infoheader = image->infoheader, .buffer = buffer, .pixels = pixels };
}

// TODO: Implementation works fine only when width and height are divisible by 256 without remainders. SORT THIS OUT!
static inline bmp_t __cdecl GenGradient(_In_ const long npixels_h, _In_ const long npixels_w) {
    bmp_t          image     = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };
    unsigned char* buffer    = NULL;
    RGBQUAD*       pixels    = NULL;
    const HANDLE64 hProcHeap = GetProcessHeap();

    if ((npixels_h % 256) || (npixels_w % 256)) {
        fwprintf_s(stderr, L"Dimensions need to be multiples of 256! Received (%5zu,%5zu)", npixels_h, npixels_w);
        return image;
    }

    if (hProcHeap == INVALID_HANDLE_VALUE) {
        fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
        return image;
    }
    buffer = HeapAlloc(hProcHeap, 0, (sizeof(RGBQUAD) * npixels_w * npixels_h) + 54); // add 54 bytes for the two structs
    if (!buffer) {
        fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
        return image;
    }

    const BITMAPFILEHEADER tmpfile = { .bfType = SOI,
                                       // packing assumed
                                       .bfSize =
                                           sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + (sizeof(RGBQUAD) * npixels_h * npixels_w),
                                       .bfOffBits   = 54,
                                       .bfReserved1 = 0,
                                       .bfReserved2 = 0 };

    const BITMAPINFOHEADER tmpinfo = { .biSize          = 40,
                                       .biWidth         = npixels_w,
                                       .biHeight        = npixels_h,
                                       .biPlanes        = 1,
                                       .biBitCount      = 32, // three bytes per RGB pixel
                                       .biCompression   = RGB,
                                       .biSizeImage     = 0,
                                       .biXPelsPerMeter = 0,
                                       .biYPelsPerMeter = 0,
                                       .biClrUsed       = 0,
                                       .biClrImportant  = 0 };

    // jump through the pixel matrix, using a window frame
    // within the rows of a window frame, gradually increment the RED value
    // along columns of a window, gradually increment the GREEN value.
    // increment the BLUE pixel across subsequent frames.

    // the deal here is that we must keep at least one RGB component constant within these stride windows. (our pick is BLUE)
    const size_t  hstride = npixels_w / 256, vstride = npixels_h / 256; // NOLINT(readability-isolate-declaration)
    unsigned char red = 0xFF, green = 0xFF, blue = 0x00;                // NOLINT(readability-isolate-declaration)

    // for moving across pixel rows, by a select stride, captures row frames, stride by stride.
    for (size_t v = 0; v < npixels_h /* for all pixels in a column */
         ;
         v += vstride) {
        // for each pixel row within that vertical stride window (a row frame with vstride rows in it, one below another)
        for (size_t j = v; j < vstride; ++j) {
            // for moving across pixel columns, partitions rows horizontally into pixel frames with hstride columns in each of them
            for (size_t h = 0; h < npixels_w /* for all pixels in a row */; h += hstride) { // NOLINT(readability-identifier-length)
                red++;
                // for each pixel within the captured pixel frame with hstride columns and vstride rows
                for (size_t i = h; i < hstride; ++i) {
                    pixels[(j * npixels_w) + i].rgbBlue     = blue;
                    pixels[(j * npixels_w) + i].rgbGreen    = green;
                    pixels[(j * npixels_w) + i].rgbRed      = red;
                    pixels[(j * npixels_w) + i].rgbReserved = 0xFF;
                }
            }
            green--;
        }
        blue++;
    }
    return (bmp_t) { .fileheader = tmpfile, .infoheader = tmpinfo, .buffer = buffer, .pixels = pixels };
}

// a struct to specify the factors to scale the colours by
// minimum scale factor is 0.0, values less than 0.0 (negatives) will be considered 0.0
// maximum scale factor is 1.0, values greater than 1.0 will be considered as 1.0
typedef struct cscale {
        float csBlue;
        float csGreen;
        float csRed;
} cscale_t;

// TODO incomplete implementation
static inline bmp_t __cdecl ScaleColors(_In_ bmp_t* const image, _In_ const cscale_t scale, _In_ const bool inplace) {
    HANDLE64       hProcHeap = NULL;
    RGBQUAD*       pixels    = NULL;
    unsigned char* buffer    = NULL;
    bmp_t          temp      = { .fileheader = { 0 }, .infoheader = { 0 }, .buffer = NULL, .pixels = NULL };

    if (!inplace) { // if a new image is requested, allocate a new pixel buffer.
        hProcHeap = GetProcessHeap();
        if (hProcHeap == INVALID_HANDLE_VALUE) {
            fwprintf_s(stderr, L"Error %lu in GetProcessHeap\n", GetLastError());
            return temp;
        }
        buffer = HeapAlloc(hProcHeap, 0, image->fileheader.bfSize - 54); // discount the 54 bytes occupied by the two structs
        if (!buffer) {
            fwprintf_s(stderr, L"Error %lu in HeapAlloc\n", GetLastError());
            return temp;
        }
    } else
        pixels = image->pixels; // if the image is to be modified inplace, copy its pixel buffer's address
}

static_assert(std::is_standard_layout<bitmap>::value);
