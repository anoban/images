#pragma once

#include <assert.h>
#include <imageio.h>
#include <stdint.h>
#include <stdio.h>

#define MAX_ICONDIRENTRIES 4LLU // most .ico images will have only one bitmap in them, so 4 is generous enough

// an ICO file can be imagined as a meta-info struct, called ICONDIR, for ICON DIRectory followed by a bitmap or an array of bitmaps
// (.ico files can contain one or more images)
// these bitmap images are stored contiguously, following the ICONDIR structure.
// each bitmap is defined by an ICONDIRENTRY struct in the ICONDIR struct
// the bitmap data can be in the format of a Windows BMP file without the BITMAPFILEHEADER struct or a PNG image in its entirety i.e uncompressed.

// in summary, the binary representation of an .ico file looks like
// ICONDIR = { ICONDIRENTRY, pixels, <ICONDIRENTRY, pixels> ... }

// emulating Win32 typedefs for syntactic consistency
typedef unsigned char  BYTE;  // 8 bits
typedef unsigned short WORD;  // 16 bits
typedef unsigned long  DWORD; // 32 bits

typedef enum IMAGETYPE { ICO = 1 /* icon */, CUR = 2 /* cursor */ } IMAGETYPE;

typedef enum BITMAPTYPE { BMP = 0xA1B2C3, PNG = 0x1A2B3C } BITMAPTYPE; // needs to be a signed integer

// look up Raymond Chen's article https://devblogs.microsoft.com/oldnewthing/20120720-00/?p=7083 for reference.

typedef struct ICONDIRENTRY {
        /*
            Win32 uses the following definition ::
            typedef struct GRPICONDIRENTRY
            {
                BYTE  bWidth;
                BYTE  bHeight;
                BYTE  bColorCount;
                BYTE  bReserved;
                WORD  wPlanes;
                WORD  wBitCount;
                DWORD dwBytesInRes;
                DWORD  dwImageOffset;
            }
            */

        BYTE  bWidth;      // width of the associated bitmap in pixels (must be in the range of 0 to 256)
        BYTE  bHeight;     // height of the associated bitmap in pixels (must be in the range of 0 to 256)
        BYTE  bColorCount; // number of colours in the colur palette, must be 0 if the bitmap doesn't use a colour palette.
        BYTE  bReserved;   // reserved byte, must always be 0.
        WORD  wPlanes;     // specifie the colour planes (should be 0 or 1) - for ICO bitmaps
        // wPlanes specifies the horizontal coordinate of the hotspot as offset from the left, in pixels - for CUR bitmaps
        WORD  wBitCount; // specifies bits per pixel - for ICO bitmaps
        // wBitCount specifies the vertical coordinate of the hotspot as offset from the top, in pixels - for CUR bitmaps
        // Windows cursors have a hotspot location, that decides one exact point that is affected by mouse events!
        // https://learn.microsoft.com/en-us/windows/win32/menurc/about-cursors
        DWORD dwBytesInRes;  // size of the associated bitmap in bytes
        DWORD dwImageOffset; // offset of the associated bitmap data, from the beginning of the .ico or .cur file
} ICONDIRENTRY;

static_assert(sizeof(ICONDIRENTRY) == 16);

/*
            Win32 uses the following definition ::
            typedef struct GRPICONDIR
            {
                WORD idReserved;
                WORD idType;
                WORD idCount;
                GRPICONDIRENTRY idEntries[];
            } GRPICONDIR
*/

typedef struct ICONDIR {
        // id prefix for IconDirectory, classic Win32 stuff
        WORD         idReserved;                    // reserved field, must always be 0
        WORD         idType;                        // specifies the type of the resources contained, values other than 1 and 2 are invalid
        WORD         idCount;                       // number of resources (images) stored in the given .ico file
        ICONDIRENTRY idEntries[MAX_ICONDIRENTRIES]; // not going to the heap for this.
        // if a .ico or .cur file is suspected to store more than 10 bitmaps, manually adjust MAXICNDRENTRYS to a higher value!
} ICONDIR;

static_assert(
    sizeof(ICONDIR) == sizeof(WORD) * 3 + 2 /* 2 byte padding after the three words */ + sizeof(ICONDIRENTRY) * MAX_ICONDIRENTRIES
);

// represents an .ico file object
typedef struct ico {
        uint8_t*   icBuffer;                    // the raw byte buffer
        ICONDIR    icIconDir;                   // parsed ICONDIR struct
        BITMAPTYPE icTypes[MAX_ICONDIRENTRIES]; // type of the bitmaps stored in the file
} ico_t;

// make sure caller validates that `bytestream` is not empty before calling ParseIconDir()
static __forceinline ICONDIR __stdcall ParseIconDir(_In_ const uint8_t* const restrict bytestream) {
    assert(bytestream); // won't help in release builds, caller is responsible!

    ICONDIR tmp = { 0 }; // making this static could improve performance but residuals from previous calls might affect the return
    // values in subsequent invocations :(

    const uint16_t idReserved = *((uint16_t*) (bytestream));
    if (idReserved) { // must be 0
        fputws(L"Error in ParseIconDir():: Non zero value encountered for idReserved!", stderr);
        return tmp;
    }

    const uint16_t idType = *((uint16_t*) (bytestream + 2));
    if (idType != ICO && idType != CUR) { // cannot be anything else
        fputws(L"Error in ParseIconDir():: File found not to be of type ICON or CURSOR!", stderr);
        return tmp;
    }

    const uint16_t idCount = *((const uint16_t*) (bytestream + 4));
    // we're 6 bytes past the beginning of the buffer now.

    // handle if the file contains more bitmaps than MAX_ICONDIRENTRIES
    if (idCount > MAX_ICONDIRENTRIES) { }

    for (size_t i = 0; i < idCount; ++i) // taking adavantage of tmp here, instead of declaring and using a new array of ICONDIRENTRYs
        tmp.idEntries[i] = ParseIconDirEntry(bytestream + 6 /* first three words */ + i * sizeof(ICONDIRENTRY));

    return (ICONDIR) { .idReserved = idReserved, .idType = idType, .idCount = idCount, .idEntries = tmp.idEntries };
}

// bytestream buffer needs to be correctly offsetted to the parse start point
static __forceinline ICONDIRENTRY __stdcall ParseIconDirEntry(_In_ const uint8_t* const restrict bytestream /* where the parsing begins */
) {
    assert(bytestream); // make sure this is valid
    static ICONDIRENTRY tmp = { 0 };

    tmp.bWidth              = *bytestream;
    tmp.bHeight             = *(bytestream + 1);
    tmp.bColorCount         = *(bytestream + 2);
    tmp.bReserved           = *(bytestream + 3);
    assert(!tmp.bReserved); // must always be 0

    tmp.wPlanes       = *((unsigned short*) (bytestream + 4));
    tmp.wBitCount     = *((unsigned short*) (bytestream + 6));
    tmp.dwBytesInRes  = *((unsigned long*) (bytestream + 8));
    tmp.dwImageOffset = *((unsigned long*) (bytestream + 12));

    return tmp;
}

ico_t IcoRead(_In_ const wchar_t* const restrict filename) {
    static ico_t         tmp    = { 0 };
    size_t               imsize = 0;
    const uint8_t* const buffer = Open(filename, &imsize);

    if (!buffer) {
        // handle it, no need for error reporting, Open() will take care of that!
    }

    tmp.icBuffer = buffer;
}

bool IcoWrite(_In_ const ico_t* const restrict image) { }

void IcoInfo(_In_ const ico_t* const restrict image) { }
